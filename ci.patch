diff --git a/shared/cfg/guest-os/Linux/JeOS/20.x86_64.cfg b/shared/cfg/guest-os/Linux/JeOS/20.x86_64.cfg
index 0f8ae3e..0b40b6b 100644
--- a/shared/cfg/guest-os/Linux/JeOS/20.x86_64.cfg
+++ b/shared/cfg/guest-os/Linux/JeOS/20.x86_64.cfg
@@ -1,6 +1,5 @@
 - 20.x86_64:
     image_name = images/jeos-20-64
-    os_variant = fedora20
     vm_arch_name = x86_64
     shell_prompt = "^\[.*\][\#\$]\s*$"
     no unattended_install..floppy_ks
diff --git a/virttest/virsh.py b/virttest/virsh.py
index 9a2dca9..df0a898 100644
--- a/virttest/virsh.py
+++ b/virttest/virsh.py
@@ -511,6 +511,7 @@ def command(cmd, **dargs):
         cmd = "%s%s%s" % (virsh_exec, uri_arg, cmd)
         # Raise exception if ignore_status is False
         ret = utils.run(cmd, verbose=debug, ignore_status=ignore_status)
+        logging.debug(ret)
         # Mark return as not coming from persistent virsh session
         ret.from_session_id = None
 
@@ -1096,6 +1097,18 @@ def define(xml_path, **dargs):
     logging.debug("Define VM from %s", xml_path)
     return command(cmd, **dargs)
 
+def create(xml_path, **dargs):
+    """
+    Return True on successful domain create.
+
+    :param xml_path: XML file path
+    :param dargs: standardized virsh function API keywords
+    :return: CmdResult object
+    """
+    cmd = "create --file %s" % xml_path
+    logging.debug("Create VM from %s", xml_path)
+    return command(cmd, **dargs)
+
 
 def undefine(name, options=None, **dargs):
     """
diff --git a/virttest/video_maker.py b/virttest/video_maker.py
index a1b4a9e..be5d26d 100644
--- a/virttest/video_maker.py
+++ b/virttest/video_maker.py
@@ -12,6 +12,7 @@ import os
 import time
 import glob
 import logging
+import re


 __all__ = ['GstPythonVideoMaker', 'video_maker']
@@ -146,7 +147,15 @@ class GstPythonVideoMaker(object):
         Process the input files and output the video file
         '''
         self.normalize_images(input_dir)
-        no_files = len(glob.glob(os.path.join(input_dir, '*.jpg')))
+        file_list = glob.glob(os.path.join(input_dir, '*.jpg'))
+        no_files = len(file_list)
+        if no_files == 0:
+            logging.debug("Number of files to encode as video is zero")
+            return
+        index_list = []
+        for ifile in file_list:
+            index_list.append(int(re.findall(r"/+.*/(\d{4})\.jpg", ifile)[0]))
+            index_list.sort()
         if self.verbose:
             logging.debug('Number of files to encode as video: %s', no_files)

@@ -157,7 +166,7 @@ class GstPythonVideoMaker(object):
         if self.verbose:
             logging.debug("Source location: %s", source_location)
         source.set_property('location', source_location)
-        source.set_property('index', 1)
+        source.set_property('index', index_list[0])
         source_caps = gst.Caps()
         source_caps.append('image/jpeg,framerate=(fraction)4/1')
         source.set_property('caps', source_caps)
@@ -192,6 +201,7 @@ class GstPythonVideoMaker(object):

         pipeline.set_state(gst.STATE_PLAYING)
         while True:
+            print source.get_property('index'), no_files
             if source.get_property('index') <= no_files:
                 if self.verbose:
                     logging.debug("Currently processing image number: %s",
